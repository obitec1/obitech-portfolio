import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, collection, query, where, onSnapshot, getDocs, addDoc, updateDoc, orderBy, serverTimestamp } from 'firebase/firestore';
import { Package, Search, LayoutDashboard, Truck, User, MapPin, Calendar, CheckCheck, ListPlus, Loader2, LogIn, LogOut, ArrowRight, X } from 'lucide-react';

// --- Global Firebase Configuration Variables (MUST BE used) ---
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-courier-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Helper to convert date object to a readable string
const formatDate = (timestamp) => {
  if (!timestamp) return 'N/A';
  // Check if it's a Firestore Timestamp object
  const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
  return date.toLocaleString();
};

// --- Main App Component ---
const App = () => {
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [currentView, setCurrentView] = useState('track'); // 'track' or 'admin'
  const [isLoading, setIsLoading] = useState(true);
  const [shipments, setShipments] = useState([]);
  const [message, setMessage] = useState('');
  const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(false); // UI state for admin access

  // 1. Firebase Initialization and Authentication
  useEffect(() => {
    if (Object.keys(firebaseConfig).length === 0) {
        console.error("Firebase config is missing.");
        setIsLoading(false);
        return;
    }

    try {
      const app = initializeApp(firebaseConfig);
      const firestore = getFirestore(app);
      const authInstance = getAuth(app);

      setDb(firestore);
      setAuth(authInstance);

      onAuthStateChanged(authInstance, async (user) => {
        if (user) {
          setUserId(user.uid);
          // Check if the user is using the custom token (i.e., they are 'authenticated' by the canvas)
          if (initialAuthToken) {
              setIsAdminLoggedIn(true); // Treat token user as admin
          }
        } else {
          // Sign in anonymously if no token is available for public use
          await signInAnonymously(authInstance);
          setIsAdminLoggedIn(false);
        }
        setIsLoading(false);
      });

      // Sign in using custom token if provided
      const signIn = async () => {
        if (initialAuthToken) {
          try {
            await signInWithCustomToken(authInstance, initialAuthToken);
          } catch (error) {
            console.error("Error signing in with custom token:", error);
            // Fallback to anonymous if custom token fails
            await signInAnonymously(authInstance);
          }
        } else {
          await signInAnonymously(authInstance);
        }
      };
      signIn();

    } catch (e) {
      console.error("Firebase initialization failed:", e);
      setIsLoading(false);
    }
  }, []);

  // 2. Real-time data fetching for Admin View
  const collectionPath = useMemo(() => `/artifacts/${appId}/public/data/shipments`, []);

  useEffect(() => {
    if (!db || !isAdminLoggedIn) {
      setShipments([]);
      return;
    }

    const q = query(collection(db, collectionPath));

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const fetchedShipments = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        // Ensure history is an array and sort it
        history: (doc.data().history || []).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
      }));
      // Sort shipments by creation date descending
      fetchedShipments.sort((a, b) => (b.createdAt?.toMillis() || 0) - (a.createdAt?.toMillis() || 0));
      setShipments(fetchedShipments);
      setMessage('');
    }, (error) => {
      console.error("Error fetching shipments:", error);
      setMessage("Failed to load shipments. Check console for details.");
    });

    return () => unsubscribe();
  }, [db, isAdminLoggedIn, collectionPath]);

  // --- Utility Components ---

  const NavButton = ({ viewName, icon: Icon, label }) => (
    <button
      onClick={() => setCurrentView(viewName)}
      className={`flex items-center space-x-2 px-4 py-2 rounded-full transition-all duration-200
        ${currentView === viewName
          ? 'bg-indigo-600 text-white shadow-lg shadow-indigo-500/50'
          : 'bg-white text-indigo-700 hover:bg-indigo-100'
        }`}
    >
      <Icon className="w-5 h-5" />
      <span className="font-semibold">{label}</span>
    </button>
  );

  const StatusPill = ({ status }) => {
    let color = 'bg-gray-200 text-gray-800';
    switch (status) {
      case 'Delivered':
        color = 'bg-green-100 text-green-700 font-bold';
        break;
      case 'Out for Delivery':
        color = 'bg-yellow-100 text-yellow-700';
        break;
      case 'In Transit':
        color = 'bg-blue-100 text-blue-700';
        break;
      case 'Processing':
        color = 'bg-indigo-100 text-indigo-700';
        break;
      case 'Cancelled':
        color = 'bg-red-100 text-red-700';
        break;
      default:
        color = 'bg-gray-200 text-gray-800';
    }
    return (
      <span className={`px-3 py-1 text-xs font-medium rounded-full ${color}`}>
        {status}
      </span>
    );
  };

  // --- Public Tracking Component ---

  const Tracker = () => {
    const [trackingInput, setTrackingInput] = useState('');
    const [trackingResult, setTrackingResult] = useState(null);
    const [isTracking, setIsTracking] = useState(false);
    const [trackMessage, setTrackMessage] = useState('');

    const handleTrack = async (e) => {
      e.preventDefault();
      if (!db || !trackingInput.trim()) return;

      setIsTracking(true);
      setTrackingResult(null);
      setTrackMessage('');

      try {
        // Query Firestore for the shipment by trackingNumber
        const q = query(collection(db, collectionPath), where("trackingNumber", "==", trackingInput.trim().toUpperCase()));
        const snapshot = await getDocs(q);

        if (snapshot.empty) {
          setTrackMessage(`No shipment found with tracking number: ${trackingInput.trim().toUpperCase()}`);
        } else {
          const docData = snapshot.docs[0].data();
          const result = {
            id: snapshot.docs[0].id,
            ...docData,
            // Sort history for display
            history: (docData.history || []).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
          };
          setTrackingResult(result);
          setTrackMessage(`Tracking successful for ${trackingInput.trim().toUpperCase()}`);
        }
      } catch (error) {
        console.error("Error tracking shipment:", error);
        setTrackMessage("An error occurred during tracking. Please try again.");
      } finally {
        setIsTracking(false);
      }
    };

    return (
      <div className="p-6">
        <h2 className="text-3xl font-bold text-indigo-700 mb-6 flex items-center">
          <Truck className="w-8 h-8 mr-3" /> Track Your Shipment
        </h2>

        <form onSubmit={handleTrack} className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 mb-8 p-4 bg-white rounded-xl shadow-lg">
          <input
            type="text"
            value={trackingInput}
            onChange={(e) => setTrackingInput(e.target.value)}
            placeholder="Enter Tracking Number (e.g., COURIER101)"
            className="flex-grow p-3 border-2 border-indigo-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"
            required
            disabled={isTracking}
          />
          <button
            type="submit"
            className="flex items-center justify-center px-6 py-3 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 transition duration-300 disabled:opacity-50"
            disabled={isTracking}
          >
            {isTracking ? <Loader2 className="w-5 h-5 animate-spin mr-2" /> : <Search className="w-5 h-5 mr-2" />}
            Track Item
          </button>
        </form>

        {trackMessage && (
          <div className={`p-3 rounded-lg text-sm mb-4 ${trackingResult ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
            {trackMessage}
          </div>
        )}

        {trackingResult && (
          <div className="bg-white p-6 rounded-xl shadow-2xl border border-indigo-100">
            <h3 className="text-2xl font-bold text-gray-800 mb-4">{trackingResult.trackingNumber}</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="p-4 border border-indigo-100 rounded-lg bg-indigo-50">
                <p className="text-sm text-gray-500">Current Status</p>
                <StatusPill status={trackingResult.status} />
              </div>
              <div className="p-4 border border-indigo-100 rounded-lg bg-indigo-50">
                <p className="text-sm text-gray-500">Estimated Delivery</p>
                <p className="font-semibold text-gray-700 flex items-center"><Calendar className="w-4 h-4 mr-2" />{trackingResult.estimatedDelivery}</p>
              </div>
              <div className="p-4 border border-indigo-100 rounded-lg bg-indigo-50">
                <p className="text-sm text-gray-500">Route</p>
                <p className="font-semibold text-gray-700 flex items-center"><MapPin className="w-4 h-4 mr-2" />{trackingResult.origin} <ArrowRight className="w-3 h-3 mx-2" /> {trackingResult.destination}</p>
              </div>
            </div>

            <div className="border-t pt-4">
              <h4 className="text-xl font-semibold text-gray-700 mb-4">Tracking History</h4>
              <ol className="relative border-l border-indigo-200 ml-3">
                {trackingResult.history.length > 0 ? trackingResult.history.map((entry, index) => (
                  <li key={index} className="mb-6 ml-6">
                    <span className={`absolute flex items-center justify-center w-3 h-3 rounded-full -left-1.5 ring-4 ring-white ${entry.description.includes('Delivered') ? 'bg-green-500' : 'bg-indigo-500'}`}></span>
                    <h5 className="mb-1 text-sm font-semibold text-gray-900">{entry.location}</h5>
                    <time className="block mb-2 text-xs font-normal leading-none text-gray-500">{formatDate(entry.timestamp)}</time>
                    <p className="text-base font-normal text-gray-700">{entry.description}</p>
                  </li>
                )) : (
                  <li className="ml-6 text-gray-500">No history updates yet.</li>
                )}
              </ol>
            </div>
          </div>
        )}
      </div>
    );
  };

  // --- Admin Component ---

  const AdminPanel = () => {
    const [selectedShipment, setSelectedShipment] = useState(null);
    const [isAddingNew, setIsAddingNew] = useState(false);

    if (!isAdminLoggedIn) {
      return (
        <div className="p-6 flex flex-col items-center justify-center min-h-64">
          <LogIn className="w-12 h-12 text-red-400 mb-4" />
          <h2 className="text-2xl font-bold text-gray-800">Access Denied</h2>
          <p className="text-gray-600">You must be logged in as an administrator to access this dashboard.</p>
          <p className="text-sm mt-4 text-gray-500">Current User ID: {userId}</p>
        </div>
      );
    }

    return (
      <div className="p-6">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-3xl font-bold text-indigo-700 flex items-center">
            <LayoutDashboard className="w-8 h-8 mr-3" /> Admin Dashboard
          </h2>
          <button
            onClick={() => { setSelectedShipment(null); setIsAddingNew(true); }}
            className="flex items-center px-4 py-2 bg-green-500 text-white font-semibold rounded-lg shadow-md hover:bg-green-600 transition"
          >
            <ListPlus className="w-5 h-5 mr-2" /> Add New Shipment
          </button>
        </div>

        {message && (
            <div className="p-3 bg-red-100 text-red-700 rounded-lg text-sm mb-4">
              {message}
            </div>
          )}

        {(isAddingNew || selectedShipment) && (
          <ShipmentForm
            shipment={selectedShipment}
            isNew={isAddingNew}
            onClose={() => { setSelectedShipment(null); setIsAddingNew(false); }}
            db={db}
            collectionPath={collectionPath}
            setMessage={setMessage}
          />
        )}

        <div className="mt-8">
          <h3 className="text-xl font-semibold text-gray-700 mb-4">All Shipments ({shipments.length})</h3>
          <div className="bg-white rounded-xl shadow-lg overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tracking No.</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Recipient</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Route</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Latest Update</th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {shipments.length === 0 ? (
                    <tr>
                        <td colSpan="6" className="px-6 py-4 text-center text-gray-500">No shipments found. Start by adding a new one!</td>
                    </tr>
                ) : shipments.map((shipment) => (
                  <tr key={shipment.id} className="hover:bg-indigo-50 transition duration-150">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{shipment.trackingNumber}</td>
                    <td className="px-6 py-4 whitespace-nowrap"><StatusPill status={shipment.status} /></td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{shipment.recipientName}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{shipment.origin} &rarr; {shipment.destination}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {shipment.history?.[0]?.description || 'N/A'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button
                        onClick={() => { setSelectedShipment(shipment); setIsAddingNew(false); }}
                        className="text-indigo-600 hover:text-indigo-900 font-semibold"
                      >
                        Edit/Update
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );
  };

  // --- Form for Adding/Updating Shipments (Used by AdminPanel) ---

  const ShipmentForm = ({ shipment, isNew, onClose, db, collectionPath, setMessage }) => {
    const [formData, setFormData] = useState({
      trackingNumber: shipment?.trackingNumber || '',
      senderName: shipment?.senderName || '',
      recipientName: shipment?.recipientName || '',
      origin: shipment?.origin || '',
      destination: shipment?.destination || '',
      estimatedDelivery: shipment?.estimatedDelivery || new Date().toISOString().split('T')[0], // YYYY-MM-DD
      status: shipment?.status || 'Processing',
      newLocation: '',
      newDescription: '',
    });
    const [isSaving, setIsSaving] = useState(false);

    const handleChange = (e) => {
      setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const generateTrackingNumber = () => {
        const prefix = 'CR';
        const num = Math.floor(100000 + Math.random() * 900000);
        return `${prefix}${num}`;
    };

    const handleGenerateTrackingNumber = () => {
        setFormData(prev => ({ ...prev, trackingNumber: generateTrackingNumber() }));
    }

    const handleSubmit = async (e) => {
      e.preventDefault();
      if (!db) return;

      setIsSaving(true);
      setMessage('');

      const baseShipmentData = {
        trackingNumber: formData.trackingNumber.toUpperCase(),
        senderName: formData.senderName,
        recipientName: formData.recipientName,
        origin: formData.origin,
        destination: formData.destination,
        estimatedDelivery: formData.estimatedDelivery,
        status: formData.status,
      };

      try {
        if (isNew) {
          // Check for duplicate tracking number first
          const q = query(collection(db, collectionPath), where("trackingNumber", "==", baseShipmentData.trackingNumber));
          const snapshot = await getDocs(q);
          if (!snapshot.empty) {
              setMessage(`Error: Tracking number ${baseShipmentData.trackingNumber} already exists.`);
              setIsSaving(false);
              return;
          }

          const initialHistory = [{
            timestamp: serverTimestamp(),
            location: formData.origin,
            description: `Shipment created. Status: ${baseShipmentData.status}`,
          }];

          await addDoc(collection(db, collectionPath), {
            ...baseShipmentData,
            history: initialHistory,
            createdAt: serverTimestamp(),
          });
          setMessage(`Shipment ${baseShipmentData.trackingNumber} added successfully!`);
        } else {
          // Update existing shipment
          const updateData = {
            ...baseShipmentData,
            updatedAt: serverTimestamp(),
          };
          await updateDoc(doc(db, collectionPath, shipment.id), updateData);
          setMessage(`Shipment ${baseShipmentData.trackingNumber} updated successfully!`);
        }

        onClose();
      } catch (error) {
        console.error("Error saving shipment:", error);
        setMessage(`Failed to save shipment: ${error.message}`);
      } finally {
        setIsSaving(false);
      }
    };

    const handleUpdateTracking = async (e) => {
        e.preventDefault();
        if (!db || !shipment || !formData.newLocation || !formData.newDescription) return;

        setIsSaving(true);
        setMessage('');

        const newEntry = {
            timestamp: new Date().toISOString(), // Use JS date for consistency in sorting/display pre-save
            location: formData.newLocation,
            description: formData.newDescription,
        };

        const newHistory = [...(shipment.history || []), newEntry];
        const newStatus = formData.newDescription.includes('Delivered') ? 'Delivered' : formData.status;

        try {
            await updateDoc(doc(db, collectionPath, shipment.id), {
                status: newStatus,
                history: newHistory,
                updatedAt: serverTimestamp(),
            });

            setMessage(`Tracking for ${shipment.trackingNumber} updated successfully to: ${formData.newDescription}`);
            // Reset tracking form fields
            setFormData(prev => ({ ...prev, newLocation: '', newDescription: '', status: newStatus }));
            // Refresh the current form's status display if it stays open
            if (shipment) shipment.status = newStatus;

        } catch (error) {
            console.error("Error updating tracking:", error);
            setMessage(`Failed to update tracking: ${error.message}`);
        } finally {
            setIsSaving(false);
        }
    };

    return (
      <div className="fixed inset-0 bg-gray-800 bg-opacity-75 z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto p-8 relative">
          <button onClick={onClose} className="absolute top-4 right-4 p-2 rounded-full bg-red-100 text-red-600 hover:bg-red-200 transition">
            <X className="w-5 h-5" />
          </button>
          <h3 className="text-2xl font-bold text-gray-800 mb-6 border-b pb-2">{isNew ? 'Create New Shipment' : `Edit Shipment: ${shipment.trackingNumber}`}</h3>

          <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            {/* Shipment Details */}
            <div className="space-y-4">
                <h4 className="font-semibold text-lg text-indigo-700">Shipment Details</h4>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Tracking Number (Required)</label>
                    <div className="flex space-x-2">
                        <input
                            type="text"
                            name="trackingNumber"
                            value={formData.trackingNumber}
                            onChange={handleChange}
                            className="mt-1 block w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 uppercase"
                            required
                            disabled={!isNew || isSaving}
                        />
                        {isNew && (
                            <button type="button" onClick={handleGenerateTrackingNumber} className="mt-1 px-4 py-3 bg-gray-200 text-gray-700 rounded-lg text-sm hover:bg-gray-300 transition">
                                Generate
                            </button>
                        )}
                    </div>
                </div>

                <div>
                    <label className="block text-sm font-medium text-gray-700">Sender Name</label>
                    <input type="text" name="senderName" value={formData.senderName} onChange={handleChange} className="mt-1 block w-full p-3 border border-gray-300 rounded-lg shadow-sm" />
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Recipient Name</label>
                    <input type="text" name="recipientName" value={formData.recipientName} onChange={handleChange} className="mt-1 block w-full p-3 border border-gray-300 rounded-lg shadow-sm" />
                </div>
                <div className="grid grid-cols-2 gap-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Origin</label>
                        <input type="text" name="origin" value={formData.origin} onChange={handleChange} className="mt-1 block w-full p-3 border border-gray-300 rounded-lg shadow-sm" />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Destination</label>
                        <input type="text" name="destination" value={formData.destination} onChange={handleChange} className="mt-1 block w-full p-3 border border-gray-300 rounded-lg shadow-sm" />
                    </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Estimated Delivery Date</label>
                        <input type="date" name="estimatedDelivery" value={formData.estimatedDelivery} onChange={handleChange} className="mt-1 block w-full p-3 border border-gray-300 rounded-lg shadow-sm" />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Current Status</label>
                        <select name="status" value={formData.status} onChange={handleChange} className="mt-1 block w-full p-3 border border-gray-300 rounded-lg shadow-sm">
                            {['Processing', 'In Transit', 'Out for Delivery', 'Delivered', 'Cancelled'].map(s => (
                                <option key={s} value={s}>{s}</option>
                            ))}
                        </select>
                    </div>
                </div>
            </div>

            {/* Tracking Update Section */}
            {!isNew && (
                <div className="space-y-4 border-l pl-6 border-indigo-200">
                    <h4 className="font-semibold text-lg text-indigo-700">Update Tracking History</h4>
                    <p className="text-sm text-gray-500">Current Status: <StatusPill status={shipment.status} /></p>

                    <form onSubmit={handleUpdateTracking} className="space-y-4 p-4 bg-indigo-50 rounded-lg border border-indigo-200">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Update Location</label>
                            <input type="text" name="newLocation" value={formData.newLocation} onChange={handleChange} placeholder="e.g., Warehouse, City Transit Hub" className="mt-1 block w-full p-3 border border-gray-300 rounded-lg shadow-sm" required />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Update Description</label>
                            <input type="text" name="newDescription" value={formData.newDescription} onChange={handleChange} placeholder="e.g., Package received for sorting" className="mt-1 block w-full p-3 border border-gray-300 rounded-lg shadow-sm" required />
                        </div>
                        <button type="submit" disabled={isSaving || !formData.newLocation || !formData.newDescription} className="w-full flex items-center justify-center px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 transition disabled:opacity-50">
                            {isSaving ? <Loader2 className="w-5 h-5 animate-spin mr-2" /> : <CheckCheck className="w-5 h-5 mr-2" />}
                            Add Tracking Update
                        </button>
                    </form>

                    <div className="mt-4 max-h-48 overflow-y-auto p-3 bg-gray-50 rounded-lg border border-gray-200">
                        <h5 className="text-md font-medium text-gray-700 mb-2">Recent History</h5>
                        {(shipment.history || []).slice(0, 3).map((entry, index) => (
                             <div key={index} className="text-xs border-b pb-1 mb-1 last:border-b-0 last:pb-0">
                                <p className="font-semibold">{entry.location}</p>
                                <p className="text-gray-600">{entry.description}</p>
                                <time className="text-gray-400">{formatDate(entry.timestamp)}</time>
                            </div>
                        ))}
                        {(shipment.history || []).length > 3 && <p className="text-xs text-center text-gray-500 mt-2">... and {shipment.history.length - 3} more entries</p>}
                    </div>

                </div>
            )}
          </form>

          {/* Action Buttons (Save/Close) */}
          <div className="pt-4 border-t flex justify-end space-x-3">
            <button onClick={onClose} type="button" className="px-5 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition">
              Cancel
            </button>
            <button
              onClick={handleSubmit}
              disabled={isSaving || !formData.trackingNumber}
              className="px-5 py-2 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 transition disabled:opacity-50"
            >
              {isSaving ? <Loader2 className="w-5 h-5 animate-spin mr-2" /> : 'Save Shipment Details'}
            </button>
          </div>
        </div>
      </div>
    );
  };


  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <Loader2 className="w-10 h-10 text-indigo-600 animate-spin mr-3" />
        <p className="text-lg font-medium text-indigo-700">Connecting to Courier Database...</p>
      </div>
    );
  }

  // Main Layout
  return (
    <div className="min-h-screen bg-gray-50 font-sans antialiased">
      <header className="bg-white shadow-lg p-4 sticky top-0 z-10">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-3">
            <Package className="w-8 h-8 text-indigo-600" />
            <h1 className="text-xl font-extrabold text-gray-900">SwiftShip Courier</h1>
            <p className="text-xs text-gray-500 hidden sm:block">User ID: {userId}</p>
          </div>

          <div className="flex space-x-3">
            <NavButton viewName="track" icon={Search} label="Track Shipment" />
            <NavButton viewName="admin" icon={LayoutDashboard} label="Admin Portal" />
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto py-8">
        <div className="bg-white rounded-xl shadow-2xl min-h-[70vh]">
          {currentView === 'track' ? <Tracker /> : <AdminPanel />}
        </div>
      </main>
    </div>
  );
};

export default App;
